@using Data.Knapsack

Available items:
<table cellpadding="2" class="table table-bordered">
    <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Weight</th>
            <th>Cost</th>
            <th>Is taken</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @for (var i = 0; i < Items.Count; i++)
        {
            var item = Items[i];
            var index = i;
        <tr>
            <td>@(i + 1)</td>
            <td>
                <input type="text" @bind="@item.Name" />
            </td>
            <td>
                <input type="number" @bind="@item.Weight" min="0" />
            </td>
            <td>
                <input type="number" @bind="@item.Cost" min="0" />
            </td>
            <td>
                @if (IsSelected(i))
                {
                    <div>+</div>
                }
            </td>
            <td>
                <input type="button" class="btn btn-link" value="Remove" @onclick="@(() => RemoveItem(index))" />
            </td>
        </tr>
        }
    </tbody>
</table>

<div>
    <input class="btn btn-outline-dark" type="button" @onclick="@CreateNewItem" value="Add new item" />
</div>

@code {
    [Parameter]
    public List<KnapsackItem> Items { get; set; }

    [Parameter]
    public List<bool> Picked { get; set; }

    private void CreateNewItem()
    {
        var item = new KnapsackItem();
        Items.Add(item);
    }

    private void RemoveItem(int index)
    {
        Items.RemoveAt(index);
        if (Picked?.Count > index)
        {
            Picked.RemoveAt(index);
        }
    }

    private bool IsSelected(int index)
    {
        return Picked != null && Picked.Count > index && Picked[index];
    }
}
