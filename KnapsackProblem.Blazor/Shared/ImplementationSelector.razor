@using Data
@using Knapsack 
@inject ImplementationRegistryService RegistryService
@implements IDisposable

<label for="selector">Select implementation</label>
<select id="selector" @onchange="OnSelected" class="custom-select-sm m-1" required>
    @{
        for (var i = 0; i < _implementations.Count; i++)
        {
            var index = i;
            <option value="@index">@_implementations[index].GetName()</option>
        }
    }
</select>

@code
{
    private List<ISolver> _implementations;
    private bool _hasSelection = false;

    private void OnSelected(ChangeEventArgs args)
    {
        var index = int.Parse(args.Value.ToString());
        RegistryService.Select(index);
    }

    private void ImplementationsAdded()
    {
        if (!_hasSelection && _implementations.Count > 0)
        {
            _hasSelection = true;
            RegistryService.Select(0);
        }
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        _implementations = RegistryService.Implementations;
        RegistryService.ImplementationAdded += ImplementationsAdded;
    }

    public void Dispose()
    {
        RegistryService.ImplementationAdded -= ImplementationsAdded;
    }
}
